[{"__type__":"cc.Material","_effectAsset":{"__uuid__":"d6nfLOM5pExrY0fKgSWptA"},"_techIdx":1,"_defines":[{}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"mainColor":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":184},"power":20,"frequency":80,"speed":1,"range":1,"nosie":0.85,"mainTexture":{"__uuid__":"7aEypqnNFKu7N3vL5W5bc4@6c48a"},"noiseTexture":{"__uuid__":"fectueW/FKqoL9WA5I78iB@6c48a"}}]},{"__type__":"cc.Mesh","_native":".bin","_struct":{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30768,"length":1386,"count":693,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":30768,"count":641,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":43,"isNormalized":false}]}],"minPosition":{"__type__":"cc.Vec3","x":-18.069761276245117,"y":-19.222412109375,"z":-0.5050793886184692},"maxPosition":{"__type__":"cc.Vec3","x":18.68243408203125,"y":19.26416015625,"z":9.898769803839969e-9}},"_dataLength":32154,"_hash":3476569565},{"__type__":"cc.Mesh","_native":".bin","_struct":{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43344,"length":1896,"count":948,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":43344,"count":903,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":43,"isNormalized":false}]}],"minPosition":{"__type__":"cc.Vec3","x":-263.0620422363281,"y":-264.9130554199219,"z":-7.189224720001221},"maxPosition":{"__type__":"cc.Vec3","x":267.6929931640625,"y":265.7692565917969,"z":-0.4382571280002594}},"_dataLength":45240,"_hash":561800007},{"__type__":"cc.Mesh","_native":".bin","_struct":{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":43,"isNormalized":false}]}],"minPosition":{"__type__":"cc.Vec3","x":-150,"y":-150},"maxPosition":{"__type__":"cc.Vec3","x":150,"y":150}},"_dataLength":204,"_hash":3401718107},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"a3zQCfCrBCDZJ4uf2rk5u8"},"_defines":[{"USE_INSTANCING":true,"USE_TEXTURE":true}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"colorScale":{"__type__":"cc.Vec3","x":1.1,"y":1.1,"z":1.1},"mainTexture":{"__uuid__":"dcx1vqxnpPs6Zn9649i88+@6c48a"}}]},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"a3zQCfCrBCDZJ4uf2rk5u8"},"_defines":[{"USE_INSTANCING":true,"USE_TEXTURE":true}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"colorScale":{"__type__":"cc.Vec3","x":1.1,"y":1.1,"z":1.1},"mainTexture":{"__uuid__":"f8NrdDAeVC47rt3x+Zz1wy@6c48a"}}]},{"__type__":"cc.EffectAsset","_name":"../art/effects/water","techniques":[{"name":"opaque","passes":[{"program":"../art/effects/water|general-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"white","type":28},"noiseTexture":{"value":"grey","type":28},"mainColor":{"value":[1,1,1,1],"type":16},"startPos":{"value":[0.5,0.5],"type":14},"power":{"value":[1],"type":13},"frequency":{"value":[100],"type":13},"speed":{"value":[10],"type":13},"range":{"value":[5],"type":13},"nosie":{"value":[0.5],"type":13}}}]},{"name":"transparent","passes":[{"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"program":"../art/effects/water|general-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"white","type":28},"noiseTexture":{"value":"grey","type":28},"mainColor":{"value":[1,1,1,1],"type":16},"startPos":{"value":[0.5,0.5],"type":14},"power":{"value":[1],"type":13},"frequency":{"value":[100],"type":13},"speed":{"value":[10],"type":13},"range":{"value":[5],"type":13},"nosie":{"value":[0.5],"type":13}}}]}],"shaders":[{"hash":2416772145,"glsl3":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_weights;\nin vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nin vec3 a_color;\nin vec2 a_texCoord;\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec3 v_tangent;\nout vec3 v_bitangent;\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec3 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  v_position = (matWorld * In.position).xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nuniform Constants {\n  vec2 startPos;\n  float power;\n  float frequency;\n  float speed;\n  float range;\n  float nosie;\n};\nin vec2 v_uv;\nin vec3 v_position;\nuniform sampler2D mainTexture;\nuniform sampler2D noiseTexture;\nuniform Constant {\n  vec4 mainColor;\n};\nvec4 frag () {\n  vec2 dv = startPos - v_uv;\n  float dis = sqrt(dv.x * dv.x + dv.y * dv.y);\n  float p=(power/range)*((range-dis)>0.0 ? range-dis : 0.0);\n  float sinFactor = sin(dis*frequency-cc_time.x*speed)*0.01*p;\n  vec2 dv1=normalize(dv);\n  vec2 offset= dv1 * sinFactor;\n  vec2 uv=offset+v_uv;\n  vec4 col = mainColor * texture(mainTexture, uv);\n  vec4 noiseCol = texture(noiseTexture, uv);\n  if (dis > 0.49)\n  {\n    col=vec4(1.0,1.0,1.0,0.0);\n  }\n  if(noiseCol.r>nosie-dis)\n  {\n    col=vec4(1.0,1.0,1.0,0.0);\n  }\n  return CCFragOutput(col);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture2D(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_weights;\nattribute vec4 a_joints;\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform sampler2D cc_jointTexture;\n    #if !CC_SUPPORT_FLOAT_TEXTURE\n    highp float decode32 (highp vec4 rgba) {\n      rgba = rgba * 255.0;\n      highp float Sign = 1.0 - step(128.0, rgba[3]) * 2.0;\n      highp float Exponent = 2.0 * mod(rgba[3], 128.0) + step(128.0, rgba[2]) - 127.0;\n      highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n      return Sign * exp2(Exponent - 23.0) * Mantissa;\n    }\n  #endif\n#else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\n#endif\nattribute vec3 a_color;\nattribute vec2 a_texCoord;\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_color;\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  v_position = (matWorld * In.position).xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  v_uv = a_texCoord;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1;\n  #endif\n  v_color = a_color;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nuniform vec2 startPos;\nuniform float power;\nuniform float frequency;\nuniform float speed;\nuniform float range;\nuniform float nosie;\nvarying vec2 v_uv;\nvarying vec3 v_position;\nuniform sampler2D mainTexture;\nuniform sampler2D noiseTexture;\nuniform vec4 mainColor;\nvec4 frag () {\n  vec2 dv = startPos - v_uv;\n  float dis = sqrt(dv.x * dv.x + dv.y * dv.y);\n  float p=(power/range)*((range-dis)>0.0 ? range-dis : 0.0);\n  float sinFactor = sin(dis*frequency-cc_time.x*speed)*0.01*p;\n  vec2 dv1=normalize(dv);\n  vec2 offset= dv1 * sinFactor;\n  vec2 uv=offset+v_uv;\n  vec4 col = mainColor * texture2D(mainTexture, uv);\n  vec4 noiseCol = texture2D(noiseTexture, uv);\n  if (dis > 0.49)\n  {\n    col=vec4(1.0,1.0,1.0,0.0);\n  }\n  if(noiseCol.r>nosie-dis)\n  {\n    col=vec4(1.0,1.0,1.0,0.0);\n  }\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"}],"blocks":[{"name":"Constants","members":[{"name":"startPos","type":14,"count":1},{"name":"power","type":13,"count":1},{"name":"frequency","type":13,"count":1},{"name":"speed","type":13,"count":1},{"name":"range","type":13,"count":1},{"name":"nosie","type":13,"count":1}],"defines":[],"binding":0},{"name":"Constant","members":[{"name":"mainColor","type":16,"count":1}],"defines":[],"binding":1}],"samplers":[{"name":"mainTexture","type":28,"count":1,"defines":[],"binding":31},{"name":"noiseTexture","type":28,"count":1,"defines":[],"binding":32}],"attributes":[{"name":"a_position","type":15,"count":1,"defines":[],"format":32,"location":0},{"name":"a_normal","type":15,"count":1,"defines":[],"format":32,"location":1},{"name":"a_tangent","type":16,"count":1,"defines":[],"format":43,"location":2},{"name":"a_vertexId","type":13,"count":1,"defines":["CC_USE_MORPH"],"format":11,"location":3},{"name":"a_weights","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":4},{"name":"a_joints","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":5},{"name":"a_jointAnimInfo","type":16,"count":1,"precision":"highp ","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"],"format":43,"isInstanced":true,"location":6},{"name":"a_matWorld0","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":7},{"name":"a_matWorld1","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":8},{"name":"a_matWorld2","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":9},{"name":"a_dyn_batch_id","type":13,"count":1,"defines":["!USE_INSTANCING","USE_BATCHING"],"format":11,"location":10},{"name":"a_color","type":15,"count":1,"defines":[],"format":32,"location":11},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":12},{"name":"a_texCoord1","type":14,"count":1,"defines":["HAS_SECOND_UV"],"format":21,"location":13}],"record":null,"name":"../art/effects/water|general-vs:vert|unlit-fs:frag"}]},{"__type__":"cc.Mesh","_native":".bin","_struct":{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26064,"length":1854,"count":927,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":26064,"count":543,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":43,"isNormalized":false}]}],"minPosition":{"__type__":"cc.Vec3","x":-29.078136444091797,"y":-30.77833366394043,"z":-9.661646842956543},"maxPosition":{"__type__":"cc.Vec3","x":27.09999656677246,"y":30.395320892333984,"z":-2.9258761405944824}},"_dataLength":27918,"_hash":888667225}]
